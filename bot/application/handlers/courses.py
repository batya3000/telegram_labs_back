from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.client.session import aiohttp
import aiohttp as aiohttp_module
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from ..states import CourseSelection, LabSubmission
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from bot_settings import Settings

router = Router()

@router.callback_query(F.data == "courses")
async def list_courses_callback(callback: CallbackQuery, state: FSMContext, settings: Settings):
    await callback.answer()
    await list_courses_impl(callback.message, state, settings, callback.from_user.id, is_callback=True)

@router.message(Command("courses"))
async def list_courses(msg: types.Message, state: FSMContext, settings: Settings):
    await list_courses_impl(msg, state, settings, msg.from_user.id)

async def list_courses_impl(msg: types.Message, state: FSMContext, settings: Settings, user_id: int, is_callback: bool = False):
    if is_callback:
        try:
            await msg.delete()
        except:
            pass
    
    async with aiohttp.ClientSession() as s:
        r = await s.get(f"{settings.API_BASE}/courses/by-chat/{user_id}")
        if r.status != 200:
            if is_callback:
                await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            else:
                await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            return
        courses = await r.json()

    if not courses:
        if is_callback:
            await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        else:
            await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        return

    keyboard_buttons = []
    for course in courses:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{course['name']} ({course['semester']})",
            callback_data=f"course_{course['id']}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if is_callback:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=keyboard)
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=keyboard)
    
    await state.set_state(CourseSelection.waiting_course)

@router.message(Command("labs"))
async def legacy_labs_command(msg: types.Message):
    await msg.answer("–ö–æ–º–∞–Ω–¥–∞ /labs –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /courses –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.")

@router.callback_query(F.data.startswith("course_"))
async def select_course_callback(callback: CallbackQuery, state: FSMContext, settings: Settings):
    await callback.answer()
    course_id = callback.data.replace("course_", "")
    await select_course_impl(callback.message, state, settings, callback.from_user.id, course_id)

@router.message(CourseSelection.waiting_course)
async def select_course(msg: types.Message, state: FSMContext, settings: Settings):
    if not msg.text.startswith("/"):
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ")
        return
    
    course_id = msg.text[1:]
    await select_course_impl(msg, state, settings, msg.from_user.id, course_id)

async def select_course_impl(msg: types.Message, state: FSMContext, settings: Settings, user_id: int, course_id: str):
    try:
        await msg.delete()
    except:
        pass
    
    async with aiohttp.ClientSession() as s:
        r = await s.get(f"{settings.API_BASE}/courses/{course_id}")
        if r.status != 200:
            await msg.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        course = await r.json()

        r = await s.get(f"{settings.API_BASE}/courses/{course_id}/groups")
        if r.status != 200:
            error_text = await r.text()
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Google Sheets.")
            return
        groups = await r.json()

    if not groups:
        await msg.answer("–î–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø")
        return

    async with aiohttp.ClientSession() as s:
        user_response = await s.get(f"{settings.API_BASE}/courses/by-chat/{user_id}")
        if user_response.status != 200:
            await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞")
            return
        
        user_data = await user_response.json()
        if not user_data:
            await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            return
        
        auth_response = await s.get(f"{settings.API_BASE}/student-group/{user_id}")
        if auth_response.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞")
            return
        
        auth_data = await auth_response.json()
        student_group = auth_data.get("group")
        
        if not student_group or str(student_group) not in groups:
            await msg.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ ({student_group}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–µ {course['name']}")
            return
        
        labs_response = await s.get(f"{settings.API_BASE}/courses/{course_id}/groups/{student_group}/labs")
        if labs_response.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö")
            return
        
        labs = await labs_response.json()
        
        if not labs:
            await msg.answer(f"–î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ({student_group}) –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç")
            return

        await state.update_data(course_id=course_id, course_name=course['name'], group_id=str(student_group), labs=labs)
        
        keyboard_buttons = []
        for i, lab in enumerate(labs):
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{lab}",
                callback_data=f"lab_{i}"
            )])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        text = f"–ö—É—Ä—Å: {course['name']}\n–ì—Ä—É–ø–ø–∞: {student_group}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é –¥–ª—è —Å–¥–∞—á–∏:"
        await msg.answer(text, reply_markup=keyboard)
        await state.set_state(LabSubmission.waiting_lab_selection)


@router.callback_query(F.data.startswith("lab_"))
async def submit_lab_callback(callback: CallbackQuery, state: FSMContext, settings: Settings):
    await callback.answer()
    try:
        lab_index = int(callback.data.replace("lab_", ""))
    except ValueError:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π")
        return
    
    await submit_lab_impl(callback.message, state, settings, callback.from_user.id, lab_index)

@router.message(LabSubmission.waiting_lab_selection)
async def submit_lab(msg: types.Message, state: FSMContext, settings: Settings):
    if not msg.text.startswith("/"):
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ")
        return
    
    try:
        lab_index = int(msg.text[1:]) - 1
    except ValueError:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await submit_lab_impl(msg, state, settings, msg.from_user.id, lab_index)

async def submit_lab_impl(msg: types.Message, state: FSMContext, settings: Settings, user_id: int, lab_index: int):
    try:
        await msg.delete()
    except:
        pass
    
    data = await state.get_data()
    course_id = data['course_id']
    group_id = data['group_id']
    labs = data['labs']
    
    if lab_index < 0 or lab_index >= len(labs):
        await msg.answer("–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    selected_lab = labs[lab_index]
    
    progress_msg = await msg.answer(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é {selected_lab} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    async with aiohttp.ClientSession() as s:
        register_response = await s.post(
            f"{settings.API_BASE}/courses/{course_id}/groups/{group_id}/register-by-chat",
            json={"chat_id": user_id}
        )
        
        if register_response.status != 200:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        register_data = await register_response.json()
        github_username = register_data.get("github")
        
        if not github_username:
            await msg.answer("‚ùå GitHub –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
            await state.clear()
            return
        
        grade_response = await s.post(
            f"{settings.API_BASE}/courses/{course_id}/groups/{group_id}/labs/{selected_lab}/grade",
            json={"github": github_username}
        )
        
        if grade_response.status == 200:
            grade_data = await grade_response.json()
            status = grade_data.get("status", "unknown")
            message = grade_data.get("message", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            passed = grade_data.get("passed", "")
            checks = grade_data.get("checks", [])
            
            response_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {selected_lab}**\n\n"
            
            if status == "updated":
                response_text += f"{message}\n"
                if passed:
                    response_text += f"{passed}\n\n"
                
                if checks:
                    response_text += "**–î–µ—Ç–∞–ª–∏:**\n"
                    for check in checks:
                        response_text += f"{check}\n"
                else:
                    response_text += "‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            elif status == "pending":
                response_text += f"‚è≥ {message}"
                if checks:
                    response_text += "\n\n**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:**\n"
                    for check in checks:
                        response_text += f"{check}\n"
            else:
                response_text += f"‚ÑπÔ∏è {message}"
            
            try:
                await progress_msg.delete()
            except:
                pass
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ö –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")]
            ])
            
            await msg.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            try:
                await progress_msg.delete()
            except:
                pass
            
            error_data = await grade_response.json() if grade_response.headers.get('content-type', '').startswith('application/json') else {}
            error_message = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ö –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")]
            ])
            
            await msg.answer(f"‚ùå {error_message}", reply_markup=keyboard)
    
    await state.clear()

@router.callback_query(F.data == "back_to_courses")
async def back_to_courses_callback(callback: CallbackQuery, state: FSMContext, settings: Settings):
    await callback.answer()
    await state.clear()

    try:
        await callback.message.delete()
    except:
        pass
    await list_courses_impl(callback.message, state, settings, callback.from_user.id, is_callback=True)

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    try:
        await callback.message.delete()
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="courses")]
    ])
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)