from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.client.session import aiohttp

from ..states import CourseSelection, LabSubmission
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from bot_settings import Settings

router = Router()

@router.message(Command("courses"))
async def list_courses(msg: types.Message, state: FSMContext, settings: Settings):
    
    async with aiohttp.ClientSession() as s:
        r = await s.get(f"{settings.API_BASE}/courses/by-chat/{msg.from_user.id}")
        if r.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            return
        courses = await r.json()

    if not courses:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        return

    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
    for course in courses:
        text += f"/{course['id']} ‚Äî {course['name']} ({course['semester']})\n"
    
    await msg.answer(text)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: /1)")
    await state.set_state(CourseSelection.waiting_course)

@router.message(Command("labs"))
async def legacy_labs_command(msg: types.Message):
    await msg.answer("–ö–æ–º–∞–Ω–¥–∞ /labs –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /courses –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.")

@router.message(CourseSelection.waiting_course)
async def select_course(msg: types.Message, state: FSMContext, settings: Settings):
    if not msg.text.startswith("/"):
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: /1)")
        return
    
    course_id = msg.text[1:]
    
    async with aiohttp.ClientSession() as s:
        r = await s.get(f"{settings.API_BASE}/courses/{course_id}")
        if r.status != 200:
            await msg.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        course = await r.json()

        r = await s.get(f"{settings.API_BASE}/courses/{course_id}/groups")
        if r.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
            return
        groups = await r.json()

    if not groups:
        await msg.answer("–î–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø")
        return

    async with aiohttp.ClientSession() as s:
        user_response = await s.get(f"{settings.API_BASE}/courses/by-chat/{msg.from_user.id}")
        if user_response.status != 200:
            await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞")
            return
        
        user_data = await user_response.json()
        if not user_data:
            await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
            return
        
        auth_response = await s.get(f"{settings.API_BASE}/student-group/{msg.from_user.id}")
        if auth_response.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞")
            return
        
        auth_data = await auth_response.json()
        student_group = auth_data.get("group")
        
        if not student_group or str(student_group) not in groups:
            await msg.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ ({student_group}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–µ {course['name']}")
            return
        
        labs_response = await s.get(f"{settings.API_BASE}/courses/{course_id}/groups/{student_group}/labs")
        if labs_response.status != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö")
            return
        
        labs = await labs_response.json()
        
        if not labs:
            await msg.answer(f"–î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ({student_group}) –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç")
            return

        await state.update_data(course_id=course_id, course_name=course['name'], group_id=str(student_group), labs=labs)
        
        text = f"–ö—É—Ä—Å: {course['name']}\n–ì—Ä—É–ø–ø–∞: {student_group}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é –¥–ª—è —Å–¥–∞—á–∏:\n"
        for i, lab in enumerate(labs, 1):
            text += f"/{i} ‚Äî {lab}\n"
        
        await msg.answer(text)
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: /1)")
        await state.set_state(LabSubmission.waiting_lab_selection)


@router.message(LabSubmission.waiting_lab_selection)
async def submit_lab(msg: types.Message, state: FSMContext, settings: Settings):
    if not msg.text.startswith("/"):
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—ë –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: /1)")
        return
    
    try:
        lab_index = int(msg.text[1:]) - 1
    except ValueError:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    data = await state.get_data()
    course_id = data['course_id']
    group_id = data['group_id']
    labs = data['labs']
    
    if lab_index < 0 or lab_index >= len(labs):
        await msg.answer("–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    selected_lab = labs[lab_index]
    
    await msg.answer(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é {selected_lab} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    async with aiohttp.ClientSession() as s:
        register_response = await s.post(
            f"{settings.API_BASE}/courses/{course_id}/groups/{group_id}/register-by-chat",
            json={"chat_id": msg.from_user.id}
        )
        
        if register_response.status != 200:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        register_data = await register_response.json()
        github_username = register_data.get("github")
        
        if not github_username:
            await msg.answer("‚ùå GitHub –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
            await state.clear()
            return
        
        grade_response = await s.post(
            f"{settings.API_BASE}/courses/{course_id}/groups/{group_id}/labs/{selected_lab}/grade",
            json={"github": github_username}
        )
        
        if grade_response.status == 200:
            grade_data = await grade_response.json()
            status = grade_data.get("status", "unknown")
            message = grade_data.get("message", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            if status == "success":
                await msg.answer(f"‚úÖ {message}")
            elif status == "pending":
                await msg.answer(f"‚è≥ {message}")
            else:
                await msg.answer(f"‚ÑπÔ∏è {message}")
        else:
            error_data = await grade_response.json() if grade_response.headers.get('content-type', '').startswith('application/json') else {}
            error_message = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await msg.answer(f"‚ùå {error_message}")
    
    await state.clear()