from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.client.session import aiohttp
import aiohttp as aiohttp_module
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import redis.asyncio as redis

from ..states import Auth
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from bot_settings import Settings

router = Router()

@router.message(Command("start"))
async def ask_code(msg: types.Message, state: FSMContext, settings: Settings):
    timeout = aiohttp_module.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as s:
        try:
            async with s.get(f"{settings.API_BASE}/student-group/{msg.from_user.id}") as r:
                if r.status == 200:
                    student_data = await r.json()
                    
                    async with s.get(f"{settings.API_BASE}/courses/by-chat/{msg.from_user.id}") as user_r:
                        if user_r.status == 200:
                            await check_github_and_proceed(msg, state, settings)
                            return
        except:
            pass
    
    await msg.answer("–í–≤–µ–¥–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    await state.set_state(Auth.waiting_code)

async def check_github_and_proceed(msg: types.Message, state: FSMContext, settings: Settings):
    timeout = aiohttp_module.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as s:
        async with s.get(f"{settings.API_BASE}/student-group/{msg.from_user.id}") as student_r:
            if student_r.status != 200:
                await msg.answer("–í–≤–µ–¥–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
                await state.set_state(Auth.waiting_code)
                return
                
            student_data = await student_r.json()
            name = student_data.get("student_name", "—Å—Ç—É–¥–µ–Ω—Ç")
            
            await state.clear()
            await msg.answer(f"‚úì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="courses")]
            ])
            
            await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(Auth.waiting_code)
async def check_code(
    msg: types.Message,
    state: FSMContext,
    settings: Settings,
    redis: redis.Redis,
):
    code = msg.text.strip()

    timeout = aiohttp_module.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as s:
        async with s.post(
            f"{settings.API_BASE}/auth/code/login",
            json={"chat_id": msg.from_user.id, "code": code},
        ) as r:
            if r.status != 200:
                await msg.answer("–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
                return

            data = await r.json()

    await redis.sadd("students", msg.from_user.id)
    
    name = data.get("student_name") or "—Å—Ç—É–¥–µ–Ω—Ç"
    
    if data.get("is_new_chat_id", False):
        await msg.answer(f"‚úì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
        await msg.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub username:")
        await state.set_state(Auth.waiting_github)
    else:
        await state.clear()
        await msg.answer(f"‚úì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="courses")]
        ])
        
        await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

@router.message(Auth.waiting_github)
async def check_github(
    msg: types.Message,
    state: FSMContext,
    settings: Settings,
):
    github_username = msg.text.strip()
    
    if not github_username or len(github_username) < 1:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π GitHub username")
        return
    
    await msg.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é GitHub –∞–∫–∫–∞—É–Ω—Ç...")
    
    timeout = aiohttp_module.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as s:
        async with s.post(
            f"{settings.API_BASE}/auth/github/update",
            json={"chat_id": msg.from_user.id, "github": github_username},
        ) as r:
            if r.status != 200:
                error_data = await r.json() if r.headers.get('content-type', '').startswith('application/json') else {}
                error_message = error_data.get("detail", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è GitHub –∞–∫–∫–∞—É–Ω—Ç–∞")
                await msg.answer(f"‚ùå {error_message}")
                await msg.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ GitHub username –µ—â–µ —Ä–∞–∑:")
                return
    
    await state.clear()
    await msg.answer(f"‚úÖ GitHub –∞–∫–∫–∞—É–Ω—Ç @{github_username} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="courses")]
    ])
    
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )